generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String        @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          Role          @default(PATIENT)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  appointments  Appointment[]
  doctor        Doctor?
  patient       Patient?

  @@map("users")
}

model Doctor {
  id           String        @id @default(cuid())
  name         String
  specialty    String
  email        String        @unique
  image        String?
  appointments Appointment[]
  timeSlots    TimeSlot[]
  user         User?         @relation(fields: [userId], references: [id])
  userId       String?       @unique

  @@map("doctors")
}

model Patient {
  id         String   @id @default(cuid())
  healthInfo String?
  user       User?    @relation(fields: [userId], references: [id])
  userId     String?  @unique

  @@map("patients")
}

model Appointment {
  id         String   @id @default(cuid())
  userId     String
  reason     String
  doctorId   String
  timeSlotId String
  date       DateTime
  doctor     Doctor   @relation(fields: [doctorId], references: [id])
  timeSlot   TimeSlot @relation(fields: [timeSlotId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@map("appointments")
}

model TimeSlot {
  id           String        @id @default(cuid())
  doctorId     String
  time         String
  day          String
  appointments Appointment[]
  doctor       Doctor        @relation(fields: [doctorId], references: [id])

  @@map("time_slots")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  PATIENT
  DOCTOR
  ADMIN
}